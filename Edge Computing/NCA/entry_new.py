import math
import numpy as np
import random
import copy
from Offloading_new import Offloading
from run import test


run = 11
total_run = 11
ec_o = np.zeros(total_run + 1)
ec_l = np.zeros(total_run + 1)
ec_i = np.zeros(total_run + 1)

while run <= total_run:
    r = Offloading(W=1 * math.pow(10, 6), edge_cpu=20, e=math.pow(10, -9), g=1, number_of_user=15,
                   number_of_edge=1)
    # 0.8347848544951842 0.8380930536576283
    # 0 = local,  1 = full, 2 = partial
    r.full_offload = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,2]

    r.D_n = np.array(
        [0.6081713193800378, 0.9629848168985293, 0.6388798080903892, 0.8698480283415665, 0.8983193509302252,
         0.6038057118654215, 0.989854510772451, 0.5015522289487879, 0.5615684406132868, 0.9778149316032207,
         0.528483043472088, 0.6306813875839115, 0.9792512708167158, 0.9875185154479058, 0.7555086712802124])
    r.X_n = np.array(
        [378544000, 450088000, 405408000, 224104000, 186000000, 213840000, 397440000, 358080000, 229200000, 408240000,
         450000000, 443424000, 211088000, 348480000, 199144000])
    r.Y_n = np.array(
        [38080000, 68736000, 51200000, 68672000, 77520000, 32448000, 32184000, 78824000, 32936000, 36192000, 110880000,
         38272000, 48216000, 65664000, 38976000])
    r.f_n = np.array([785822799.1649126, 1049455497.7204524, 1010611563.6158786, 1308610580.8006477, 819002730.8090328,
                      1301168449.5903726, 738161974.5994451, 1318882456.9256296, 1323104703.1605594, 1201102948.1874602,
                      623877874.9487828, 1467332175.5420337, 1301672239.1543636, 641621659.4113429, 920079556.1878166])
    r.P_max = np.array(
        [0.8619354565026924, 0.6873828350682971, 0.6360122821755303, 0.5540517562986288, 0.699985309902694,
         0.6882454769964571, 0.8462063727637572, 0.6034951259552694, 0.7182963636242563, 0.8648175333109251,
         0.532948223085215, 0.8892560705233667, 0.8077594268704245, 0.5638689400408405, 0.5263784986745463])
    r.A = np.array(
        [10520000.0, 11432000.0, 7952000.0, 8152000.0, 7960000.0, 9456000.0, 9464000.0, 11104000.0, 11816000.0,
         7624000.0, 11344000.0, 9352000.0, 11192000.0, 11880000.0, 8720000.0]) / 1.3
    r.B = np.array(
        [3312000.0, 6672000.0, 3512000.0, 7536000.0, 3544000.0, 3584000.0, 3856000.0, 6536000.0, 6912000.0, 7304000.0,
         3424000.0, 6960000.0, 5104000.0, 7616000.0, 5784000.0])
    r.H = np.array(
        [([0.00095485]), ([0.00085157]), ([0.00072377]), ([0.00022466]),([0.00122855]),
         ([0.0008591]), ([0.00097999]), ([0.00183782]), ([0.00078619]), ([0.00076167]),
         ([0.00071047]), ([0.00117489]), ([0.00098078]), ([0.00138367]),([0.00075473])])

    for n in range(r.number_of_user):
        f_opt = min((r.X_n[n] + r.Y_n[n]) / r.D_n[n], r.f_n[n])
        e_n = r.g * r.k * (r.X_n[n] + r.Y_n[n]) * math.pow(f_opt, 2)
        r.loc_only_e[n] = e_n

    """
    for n in range(r.number_of_user):
        if r.full_offload[n] == 1:
            r.X_n[n] = r.X_n[n] + r.Y_n[n]
            r.Y_n[n] = 0.0
            r.B[n] = r.A[n]
    """

    # full 0.012  0.006
    g = int((27 + run * 5)/r.number_of_user)
    r.set_initial_sub_channel(27 + run * 5, 3, chs=None)
    r.set_multipliers(step=0.0002, p_adjust=1.5, v_n=1, var_k=math.pow(10, -10), delta_l_n=0.5 * math.pow(10, -16),
                      delta_var_k=math.pow(10, -18), delta_d_n_k=math.pow(10, -15))
    r.set_initial_values()
    r.run(run, t=1, t_max=8000, t_delay=2500, t_stable=3000)
    ec_o[run], ec_l[run], ec_i[run] = test(r)
    run = run + 1

print(ec_o)
print(ec_l)
print("ec_i=", list(ec_i))
print(r.full_offload)
# [6, 6, 10, 6, 13, 6, 8, 7, 10, 10]